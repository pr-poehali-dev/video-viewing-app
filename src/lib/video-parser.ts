export interface VideoInfo {
  id: string;
  title: string;
  duration: string;
  thumbnail: string;
  platform: 'youtube' | 'twitch' | 'direct' | 'unknown';
  embedUrl: string;
  originalUrl: string;
}

export interface ParsedVideo {
  isValid: boolean;
  videoInfo?: VideoInfo;
  error?: string;
}

export class VideoParser {
  private static youtubeRegex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  private static twitchRegex = /(?:twitch\.tv\/)(?:videos\/)?(\d+)|(?:twitch\.tv\/)([a-zA-Z0-9_]+)/;
  private static directVideoRegex = /\.(mp4|webm|ogg|avi|mov|wmv|flv|mkv)(?:\?.*)?$/i;

  static async parseVideoUrl(url: string): Promise<ParsedVideo> {
    try {
      const normalizedUrl = this.normalizeUrl(url);
      
      // YouTube detection
      const youtubeMatch = normalizedUrl.match(this.youtubeRegex);
      if (youtubeMatch) {
        return await this.parseYouTubeVideo(youtubeMatch[1], normalizedUrl);
      }

      // Twitch detection
      const twitchMatch = normalizedUrl.match(this.twitchRegex);
      if (twitchMatch) {
        return await this.parseTwitchVideo(twitchMatch[1] || twitchMatch[2], normalizedUrl);
      }

      // Direct video link detection
      if (this.directVideoRegex.test(normalizedUrl)) {
        return this.parseDirectVideo(normalizedUrl);
      }

      // Try to extract video from any webpage
      return await this.parseWebpageVideo(normalizedUrl);
      
    } catch (error) {
      return {
        isValid: false,
        error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  private static normalizeUrl(url: string): string {
    if (!url.startsWith('http')) {
      url = 'https://' + url;
    }
    return url;
  }

  private static async parseYouTubeVideo(videoId: string, originalUrl: string): Promise<ParsedVideo> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ YouTube Data API
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const mockVideoInfo: VideoInfo = {
        id: videoId,
        title: `YouTube Video ${videoId}`,
        duration: '10:30',
        thumbnail: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,
        platform: 'youtube',
        embedUrl: `https://www.youtube.com/embed/${videoId}?autoplay=1&controls=1`,
        originalUrl
      };

      return {
        isValid: true,
        videoInfo: mockVideoInfo
      };
    } catch (error) {
      return {
        isValid: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YouTube –≤–∏–¥–µ–æ'
      };
    }
  }

  private static async parseTwitchVideo(videoId: string, originalUrl: string): Promise<ParsedVideo> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ Twitch API
      const isLive = !originalUrl.includes('videos/');
      
      const mockVideoInfo: VideoInfo = {
        id: videoId,
        title: isLive ? `Live Stream: ${videoId}` : `Twitch VOD: ${videoId}`,
        duration: isLive ? 'LIVE' : '45:20',
        thumbnail: `https://static-cdn.jtvnw.net/previews-ttv/live_user_${videoId}.jpg`,
        platform: 'twitch',
        embedUrl: isLive 
          ? `https://player.twitch.tv/?channel=${videoId}&parent=${window.location.hostname}`
          : `https://player.twitch.tv/?video=${videoId}&parent=${window.location.hostname}`,
        originalUrl
      };

      return {
        isValid: true,
        videoInfo: mockVideoInfo
      };
    } catch (error) {
      return {
        isValid: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Twitch —Å—Ç—Ä–∏–º–µ'
      };
    }
  }

  private static parseDirectVideo(url: string): ParsedVideo {
    const filename = url.split('/').pop()?.split('?')[0] || '–í–∏–¥–µ–æ';
    
    const videoInfo: VideoInfo = {
      id: this.generateId(),
      title: filename,
      duration: '??:??',
      thumbnail: 'üé¨',
      platform: 'direct',
      embedUrl: url,
      originalUrl: url
    };

    return {
      isValid: true,
      videoInfo
    };
  }

  private static async parseWebpageVideo(url: string): Promise<ParsedVideo> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å oEmbed –∏–ª–∏ –º–µ—Ç–∞—Ç–µ–≥–∏ Open Graph
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      const videoInfo: VideoInfo = {
        id: this.generateId(),
        title: '–í–∏–¥–µ–æ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        duration: '??:??',
        thumbnail: 'üåê',
        platform: 'unknown',
        embedUrl: url,
        originalUrl: url
      };

      return {
        isValid: true,
        videoInfo
      };
    } catch (error) {
      return {
        isValid: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–∏–¥–µ–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
      };
    }
  }

  private static generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }

  static getEmbedHtml(videoInfo: VideoInfo): string {
    switch (videoInfo.platform) {
      case 'youtube':
        return `<iframe 
          width="100%" 
          height="100%" 
          src="${videoInfo.embedUrl}" 
          frameborder="0" 
          allowfullscreen
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture">
        </iframe>`;
        
      case 'twitch':
        return `<iframe 
          width="100%" 
          height="100%" 
          src="${videoInfo.embedUrl}" 
          frameborder="0" 
          allowfullscreen
          scrolling="no">
        </iframe>`;
        
      case 'direct':
        return `<video 
          width="100%" 
          height="100%" 
          controls 
          autoplay
          src="${videoInfo.embedUrl}">
          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ HTML5.
        </video>`;
        
      default:
        return `<iframe 
          width="100%" 
          height="100%" 
          src="${videoInfo.embedUrl}" 
          frameborder="0" 
          allowfullscreen>
        </iframe>`;
    }
  }
}